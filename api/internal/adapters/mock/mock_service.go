// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/internal/application/ports.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	application "github.com/lordvidex/gomoney/api/internal/application"
	core "github.com/lordvidex/gomoney/api/internal/core"
	gomoney "github.com/lordvidex/gomoney/pkg/gomoney"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// GetUserFromPhone mocks base method.
func (m *MockUserRepository) GetUserFromPhone(arg0 context.Context, arg1 string) (*core.ApiUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFromPhone", arg0, arg1)
	ret0, _ := ret[0].(*core.ApiUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFromPhone indicates an expected call of GetUserFromPhone.
func (mr *MockUserRepositoryMockRecorder) GetUserFromPhone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFromPhone", reflect.TypeOf((*MockUserRepository)(nil).GetUserFromPhone), arg0, arg1)
}

// SaveUser mocks base method.
func (m *MockUserRepository) SaveUser(arg0 context.Context, arg1 *core.ApiUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockUserRepositoryMockRecorder) SaveUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockUserRepository)(nil).SaveUser), arg0, arg1)
}

// MockTokenHelper is a mock of TokenHelper interface.
type MockTokenHelper struct {
	ctrl     *gomock.Controller
	recorder *MockTokenHelperMockRecorder
}

// MockTokenHelperMockRecorder is the mock recorder for MockTokenHelper.
type MockTokenHelperMockRecorder struct {
	mock *MockTokenHelper
}

// NewMockTokenHelper creates a new mock instance.
func NewMockTokenHelper(ctrl *gomock.Controller) *MockTokenHelper {
	mock := &MockTokenHelper{ctrl: ctrl}
	mock.recorder = &MockTokenHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenHelper) EXPECT() *MockTokenHelperMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockTokenHelper) CreateToken(payload core.Payload) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", payload)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockTokenHelperMockRecorder) CreateToken(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockTokenHelper)(nil).CreateToken), payload)
}

// TokenDuration mocks base method.
func (m *MockTokenHelper) TokenDuration() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenDuration")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// TokenDuration indicates an expected call of TokenDuration.
func (mr *MockTokenHelperMockRecorder) TokenDuration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenDuration", reflect.TypeOf((*MockTokenHelper)(nil).TokenDuration))
}

// VerifyToken mocks base method.
func (m *MockTokenHelper) VerifyToken(token string) (core.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", token)
	ret0, _ := ret[0].(core.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockTokenHelperMockRecorder) VerifyToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockTokenHelper)(nil).VerifyToken), token)
}

// MockPasswordHasher is a mock of PasswordHasher interface.
type MockPasswordHasher struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordHasherMockRecorder
}

// MockPasswordHasherMockRecorder is the mock recorder for MockPasswordHasher.
type MockPasswordHasherMockRecorder struct {
	mock *MockPasswordHasher
}

// NewMockPasswordHasher creates a new mock instance.
func NewMockPasswordHasher(ctrl *gomock.Controller) *MockPasswordHasher {
	mock := &MockPasswordHasher{ctrl: ctrl}
	mock.recorder = &MockPasswordHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordHasher) EXPECT() *MockPasswordHasherMockRecorder {
	return m.recorder
}

// CheckPasswordHash mocks base method.
func (m *MockPasswordHasher) CheckPasswordHash(hashPassword, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPasswordHash", hashPassword, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckPasswordHash indicates an expected call of CheckPasswordHash.
func (mr *MockPasswordHasherMockRecorder) CheckPasswordHash(hashPassword, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPasswordHash", reflect.TypeOf((*MockPasswordHasher)(nil).CheckPasswordHash), hashPassword, password)
}

// CreatePasswordHash mocks base method.
func (m *MockPasswordHasher) CreatePasswordHash(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePasswordHash", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePasswordHash indicates an expected call of CreatePasswordHash.
func (mr *MockPasswordHasherMockRecorder) CreatePasswordHash(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePasswordHash", reflect.TypeOf((*MockPasswordHasher)(nil).CreatePasswordHash), password)
}

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockService) CreateAccount(ctx context.Context, param application.CreateAccountParam) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, param)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockServiceMockRecorder) CreateAccount(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockService)(nil).CreateAccount), ctx, param)
}

// CreateUser mocks base method.
func (m *MockService) CreateUser(ctx context.Context, param application.CreateUserParam) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, param)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockServiceMockRecorder) CreateUser(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockService)(nil).CreateUser), ctx, param)
}

// DeleteAccount mocks base method.
func (m *MockService) DeleteAccount(ctx context.Context, param application.DeleteAccountParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", ctx, param)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockServiceMockRecorder) DeleteAccount(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockService)(nil).DeleteAccount), ctx, param)
}

// Deposit mocks base method.
func (m *MockService) Deposit(ctx context.Context, param application.DepositParam) (*gomoney.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", ctx, param)
	ret0, _ := ret[0].(*gomoney.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deposit indicates an expected call of Deposit.
func (mr *MockServiceMockRecorder) Deposit(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockService)(nil).Deposit), ctx, param)
}

// GetAccounts mocks base method.
func (m *MockService) GetAccounts(ctx context.Context, ID string) ([]gomoney.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts", ctx, ID)
	ret0, _ := ret[0].([]gomoney.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccounts indicates an expected call of GetAccounts.
func (mr *MockServiceMockRecorder) GetAccounts(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockService)(nil).GetAccounts), ctx, ID)
}

// GetTransactionSummary mocks base method.
func (m *MockService) GetTransactionSummary(ctx context.Context, userID string) ([]gomoney.TransactionSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionSummary", ctx, userID)
	ret0, _ := ret[0].([]gomoney.TransactionSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionSummary indicates an expected call of GetTransactionSummary.
func (mr *MockServiceMockRecorder) GetTransactionSummary(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionSummary", reflect.TypeOf((*MockService)(nil).GetTransactionSummary), ctx, userID)
}

// GetTransactions mocks base method.
func (m *MockService) GetTransactions(ctx context.Context, param application.UserWithAccount) (gomoney.TransactionSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", ctx, param)
	ret0, _ := ret[0].(gomoney.TransactionSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockServiceMockRecorder) GetTransactions(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockService)(nil).GetTransactions), ctx, param)
}

// GetUserByPhone mocks base method.
func (m *MockService) GetUserByPhone(ctx context.Context, phone string) (*core.ApiUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByPhone", ctx, phone)
	ret0, _ := ret[0].(*core.ApiUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByPhone indicates an expected call of GetUserByPhone.
func (mr *MockServiceMockRecorder) GetUserByPhone(ctx, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByPhone", reflect.TypeOf((*MockService)(nil).GetUserByPhone), ctx, phone)
}

// Transfer mocks base method.
func (m *MockService) Transfer(ctx context.Context, param application.CreateTransferParam) (*gomoney.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, param)
	ret0, _ := ret[0].(*gomoney.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer.
func (mr *MockServiceMockRecorder) Transfer(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockService)(nil).Transfer), ctx, param)
}

// Withdraw mocks base method.
func (m *MockService) Withdraw(ctx context.Context, param application.WithdrawParam) (*gomoney.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, param)
	ret0, _ := ret[0].(*gomoney.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockServiceMockRecorder) Withdraw(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockService)(nil).Withdraw), ctx, param)
}
