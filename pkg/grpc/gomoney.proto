syntax = "proto3";

package grpc;
 import "google/protobuf/timestamp.proto";

option go_package = "github.com/lordvidex/gomoney/pkg/grpc";


// messages
message StringID {
  string id = 1;
}
message IntID {
  int64 id = 1;
}

message Phone {
  string number = 1;
}

message User {
  string id = 1;
  string name = 2;
  string phone = 3;
}

message Account {
  int64 id = 1;
  string title = 2;
  string description = 3;
  double balance = 4;
  Currency currency = 5;
  bool is_blocked = 6;
}

message ManyAccounts {
  StringID owner = 1;
  repeated Account accounts = 2;
}

enum Currency {
  NONE = 0;
  USD = 1;
  RUB = 2;
  NGN = 3;
}

enum TransactionType {
  TRANSFER = 0;
  DEPOSIT = 1;
  WITHDRAWAL = 2;
}

message TransactionParam {
  double amount = 1;
  StringID actor = 2;
  optional int64 from = 3; // if not set, then it's a deposit
  optional int64 to = 4; // if not set, then it's a withdrawal
  // note that one of them has to be set
}

message Transaction {
  StringID id = 1;
  double amount = 2;
  optional Account from = 3;
  optional Account to = 4;
  google.protobuf.Timestamp created_at = 5;
  TransactionType type = 6;
}

message ManyTransactions {
  repeated Transaction transactions = 1;
  IntID account = 2;
}

message UserWithAccount {
  StringID user = 1;
  IntID account = 2;
}

// services

service UserService {
  rpc GetUserByPhone(Phone) returns (User) {}
  rpc CreateUser(User) returns (StringID) {}  
}

service AccountService {
  rpc GetAccounts(StringID) returns (ManyAccounts) {} // get all accounts of a user
  rpc CreateAccount(ManyAccounts) returns (IntID) {} // create an account for a user
}

service TransactionService {
  rpc Transfer(TransactionParam) returns (Transaction) {}
  rpc Deposit(TransactionParam) returns (Transaction) {}
  rpc Withdraw(TransactionParam) returns (Transaction) {}
  // this returns the last 10 transactions for every account owned by user id
  rpc GetTransactionSummary(StringID) returns (ManyTransactions) {}
  // this returns all transactions for a particular account owned by user id
  rpc GetTransactions(UserWithAccount) returns (ManyTransactions) {}
}