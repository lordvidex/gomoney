// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: transaction.sql

package sqlgen

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

const deposit = `-- name: Deposit :exec
UPDATE "accounts" SET balance = balance + $1 WHERE id = $2
`

type DepositParams struct {
	Amount pgtype.Numeric
	ID     int64
}

func (q *Queries) Deposit(ctx context.Context, arg DepositParams) error {
	_, err := q.db.Exec(ctx, deposit, arg.Amount, arg.ID)
	return err
}

const getTransactions = `-- name: GetTransactions :many
SELECT id, amount, type, created_at, from_account_id, to_account_id from "transactions" WHERE from_account_id=$1 OR to_account_id=$1 ORDER BY created_at DESC
`

func (q *Queries) GetTransactions(ctx context.Context, fromAccountID sql.NullInt64) ([]*Transaction, error) {
	rows, err := q.db.Query(ctx, getTransactions, fromAccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.Type,
			&i.CreatedAt,
			&i.FromAccountID,
			&i.ToAccountID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveTransaction = `-- name: SaveTransaction :exec
INSERT INTO "transactions" (id, created_at, from_account_id, to_account_id, amount, type) VALUES ($1, $2, $3, $4, $5, $6)
`

type SaveTransactionParams struct {
	ID            uuid.UUID
	CreatedAt     time.Time
	FromAccountID sql.NullInt64
	ToAccountID   sql.NullInt64
	Amount        pgtype.Numeric
	Type          TransactionType
}

func (q *Queries) SaveTransaction(ctx context.Context, arg SaveTransactionParams) error {
	_, err := q.db.Exec(ctx, saveTransaction,
		arg.ID,
		arg.CreatedAt,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Amount,
		arg.Type,
	)
	return err
}

const withdraw = `-- name: Withdraw :exec
UPDATE "accounts" SET balance = balance - $1 WHERE id = $2
`

type WithdrawParams struct {
	Amount pgtype.Numeric
	ID     int64
}

func (q *Queries) Withdraw(ctx context.Context, arg WithdrawParams) error {
	_, err := q.db.Exec(ctx, withdraw, arg.Amount, arg.ID)
	return err
}
