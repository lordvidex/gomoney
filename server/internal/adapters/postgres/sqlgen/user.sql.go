// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package sqlgen

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "users" (name, phone) VALUES ($1, $2) RETURNING id, name, phone
`

type CreateUserParams struct {
	Name  string
	Phone string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Phone)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Phone)
	return &i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, name, phone FROM "users" WHERE phone = $1
`

func (q *Queries) GetUserByPhone(ctx context.Context, phone string) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByPhone, phone)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Phone)
	return &i, err
}
